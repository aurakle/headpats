plugins {
	id 'maven-publish'
	id 'me.fallenbreath.yamlang' version '1.3.1'
}

apply plugin: "fabric-loom"
apply plugin: "me.modmuss50.mod-publish-plugin"

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

loom {
	runConfigs.client.ideConfigGenerated = true
	runConfigs.server.ideConfigGenerated = true
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.

	maven {
		url "https://maven.enjarai.dev/releases"
	}
	maven {
		url "https://maven.enjarai.dev/mirrors"
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modApi("nl.enjarai:cicada-lib:${property('deps.cicada')}")

	include modApi("org.ladysnake.cardinal-components-api:cardinal-components-base:${property('deps.cardinal-components-api')}")
	include modApi("org.ladysnake.cardinal-components-api:cardinal-components-entity:${property('deps.cardinal-components-api')}")

	modCompileOnly modLocalRuntime("com.terraformersmc:modmenu:${property('deps.modmenu')}")

	modApi("dev.isxander:yet-another-config-lib:${property('deps.yacl')}")
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

yamlang {
	targetSourceSets = [sourceSets.main]
	inputDir = "assets/headpats/lang"
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

publishMods {
	file = remapJar.archiveFile
	displayName = "${property('mod_version')} for ${property('minecraft_version')}"
	version = project.version
	changelog = file("CHANGELOG.md").text
	type = STABLE
	modLoaders.add("fabric")

	def min = property('publish_target_min')
	def max = property('publish_target_max')

	if (providers.gradleProperty('enjaraiModrinthToken').present) {
		modrinth {
			projectId = property('mod_modrinth')
			accessToken = providers.gradleProperty('enjaraiModrinthToken').get()

			if (min == max) {
				minecraftVersions.add(min)
			} else {
				minecraftVersionRange {
					start = min
					end = max
				}
			}

			requires {
				slug = "fabric-api"
			}
			requires {
				slug = "cicada"
			}
			embeds {
				slug = "cardinal-components-api"
			}
		}
	}

	if (providers.gradleProperty('enjaraiGithubToken').present) {
		github {
			repository = property('mod_github')
			accessToken = providers.gradleProperty('enjaraiGithubToken').get()

			commitish = property('git_branch')
			tagName = project.version
		}
	}
}